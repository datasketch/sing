% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval-updates.R
\name{update_input}
\alias{update_input}
\title{Update a Shiny input}
\usage{
update_input(session, input_id, input_type, new_values)
}
\arguments{
\item{input_id}{The id of the inputs to be updated.}

\item{input_type}{The type of the input (e.g., "selectInput", "checkboxInput").}

\item{new_values}{A named list of new values for the input.
The names should correspond to the arguments of the update function.}
}
\value{
None. This function is used for its side effect of updating a Shiny input.
}
\description{
This function updates a Shiny input based on the type of input and new values provided.
It uses the \code{update_info} data frame to find the appropriate update function and its arguments.
}
\examples{
\dontrun{
 library(shiny)
 library(shinyinvoer)

ui <- fluidPage(
  uiOutput("numeric_out"),
  uiOutput("slider_out")
)

server <- function(input, output, session) {

  output$numeric_out <- renderUI({
    numberInput("id_test",
                "Number of observations",
                value = 70,
                min = 10,
                max = 100)
  })

  output$slider_out <- renderUI({
    sliderInput("id_slide",
                "Slide value",
                value = 7,
                min = 3,
                max = 15)
  })


  observe({
    if (!is.null(input$id_slide)) {
      if (input$id_slide == 10) {
        update_input(session, "id_test", "numberInput", new_values = 10)
      }
    }
  })


}

shinyApp(ui, server)

}
}
